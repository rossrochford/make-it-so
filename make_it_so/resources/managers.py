from django.db import models


class ResourceModelManager(models.Manager):

    def _sanitize_kwargs(self, kwargs):
        # note: provider_id must already be generated by the time it gets here

        from resources.models import ResourceModel
        resource_classes = ResourceModel.get_resource_classes()

        rtype = kwargs.get('rtype')
        assert rtype and rtype in resource_classes

        extra_data = kwargs.pop('extra_data')
        for key, val in extra_data.items():
            if isinstance(val, ResourceModel):
                extra_data[key] = val.id

        ResourceClass = resource_classes[rtype]
        ExtraModelClass = ResourceClass.EXTRA_FIELDS_MODEL_CLASS

        # fails if provider id is missing
        extra_obj = ExtraModelClass(**extra_data)
        kwargs['extra_data'] = extra_obj.dict()

    def get_or_create(self, *args, **kwargs):
        from resources.models import ResourceModel

        query = None
        if {'slug', 'rtype', 'project'}.issubset(kwargs.keys()):
            query = ResourceModel.objects.filter(
                slug=kwargs['slug'], rtype=kwargs['rtype'],
                project=kwargs['project']
            )
        elif 'hcl_slug' in kwargs:
            query = ResourceModel.objects.filter(hcl_slug=kwargs['hcl_slug'])

        if query and query.exists():
            return query.first(), False

        if 'defaults' in kwargs:
            kwargs.update(kwargs.pop('defaults'))

        new_obj = self.create(*args, **kwargs)

        return new_obj, True

    def create(self, *args, **kwargs):
        self._sanitize_kwargs(kwargs)
        return super().create(*args, **kwargs)
